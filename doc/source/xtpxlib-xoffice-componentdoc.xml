<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../../xtpxlib-xdoc/xsd/docbook/docbook.nvdl" type="application/xml" schematypens="http://purl.oclc.org/dsdl/nvdl/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude"
  xmlns:xdoc="http://www.xtpxlib.nl/ns/xdoc" version="5.0">
  <!-- ================================================================== -->
  <!--
    Source for this component's documentation.
  -->
  <!-- ================================================================== -->

  <info>
    <title>{$component-name}</title>
    <subtitle>Conversions for Word and Excel files</subtitle>
    <pubdate>{$DATE}</pubdate>
    <author>
      <personname>{$author-name}</personname>
    </author>
    <orgname>{$owner-company-name}</orgname>
  </info>

  <!-- ================================================================== -->

  <preface>
    <title>{$library-name} - Conversions for Word and Excel files</title>

    <xdoc:transform href="../../../xtpxlib-webdoc/transforms/generate-basic-component-information-header.xpl" component-name="{$component-name}"/>

  </preface>

  <!-- ================================================================== -->

  <chapter xml:id="chapter-description">
    <title>Description</title>

    <para>Microsoft Office files are actually zip files with a lot of XML and other stuff inside. It is remarkably difficult to get to the actual
      contents of them: What is in Excel cell A1B2 or what is written in this Word document. To help with this, the <code>{$component-name}</code>
      component contains XProc (1.0 and 3.0) pipelines to extract contents from Excel (<code>.xlsx</code>) and Word (<code>.docx</code>) files.</para>

    <para>The namespace prefix <code>xtlxo:</code> is bound to the namespace <code>http://www.xtpxlib.nl/ns/xoffice</code>
        (<code>xmlns:xtlxo="http://www.xtpxlib.nl/ns/xoffice"</code>).</para>

    <note>
      <para>Especially the <code>.docx</code> (Word) conversions should be considered unfinished and experimental. Not everything is converted.</para>
    </note>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <sect1>
      <title>Converting from Excel (<code>.xlsx</code>)</title>

      <para>The <code>xtlxo:extract-xlsx</code> pipeline takes an Excel <code>.xlsx</code> file and turns this into much more manageable XML. The
        schema for the resulting XML format is <link linkend="xlsx-extract.xsd">here</link>.</para>

      <para>Take for instance this simple Excel sheet:</para>
      <figure>
        <title>Excel example sheet</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="resources/excel-example.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Running this through the <code>xtlxo:extract-xlsx</code> pipeline returns something like this:</para>
      <programlisting><xi:include href="listings/example-excel-result.xml" parse="text"/></programlisting>
    </sect1>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <sect1>
      <title>Converting to Excel (<code>.xlsx</code>)</title>

      <para>The <code>xtlxo:modify-xlsx</code> pipeline takes a template Excel <code>.xlsx</code> file and changes this. The result will be written to
        a new Excel file.</para>
      <para role="keep-with-next">It has the following features:</para>
      <itemizedlist>
        <listitem>
          <para>You can change the individual worksheets in the Excel file. A worksheet is identified by its <emphasis>name</emphasis> (the name that
            is visible on its tab at the bottom of the Excel screen).</para>
        </listitem>
        <listitem>
          <para>You can identify a cell on a worksheet in three ways:</para>
          <itemizedlist>
            <listitem>
              <para>As a direct numeric row/column index</para>
            </listitem>
            <listitem>
              <para>As identified by an Excel <emphasis>name</emphasis>. You can use this to identify a cell, by row, column, or both. An Excel name
                can reference an area (or even multiple areas) on a worksheet. To work around this the most upper-left cell in the named area(s) is
                used.</para>
            </listitem>
            <listitem>
              <para>Using an Excel name (like above) and adding a numeric offset.</para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>You can insert a numeric or string value in a cell. </para>
        </listitem>
        <listitem>
          <para>You have to specify the type of the data to insert (so you can, for instance, insert a numeric value as a string if necessary)</para>
        </listitem>
      </itemizedlist>

      <para role="keep-with-next">There are some things you need to take care of creating the template Excel file:</para>
      <itemizedlist>
        <listitem>
          <para>If you need formatting in a cell you're going to fill with this pipeline (like colors, borders, etc.) there <emphasis>must</emphasis>
            be some contents in the cell. Since this will be overwritten, it should not be a problem.</para>
        </listitem>
        <listitem>
          <para>The same is true for a cell you're referencing by name: It must contain some contents. If you need this contents to be invisible you
            can always use a single space character.</para>
        </listitem>
        <listitem>
          <para>Names of worksheets and cells are case-sensitive.</para>
        </listitem>
      </itemizedlist>

      <para role="keep-with-next">The XML for specifying the changes to the Excel file is quite simple. The schema can be found <link
          linkend="xlsx-modify.xsd">here</link>. A simple example:</para>

      <programlisting><xi:include href="listings/example-modify-xlsx-input.xml" parse="text"/></programlisting>
    </sect1>

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->

    <sect1>
      <title>Converting from Word (<code>.docx</code>)</title>

      <para>The <code>xtlxo:extract-docx</code> pipeline takes a Word (<code>.docx</code>) file and turns this into an understandable XML format. This
        format is experimental, there is currently no schema for it.</para>

      <para>As an example take this simple Word file:</para>
      <figure>
        <title>Example Word document</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="resources/word-example.png"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Running this through the <code>xtlxo:extract-docx</code> pipeline returns something like:</para>
      <programlisting><xi:include href="listings/example-word-result.xml" parse="text"/></programlisting>

      <para role="halfbreak"/>
      <para>There's an experimental pipeline <code>xtlxo:create-docx</code> to create Word documents (using a template Word document for things like
        styles, margins, etc.). If you feed this the same kind of XML you get from <code>xtlxo:extract-docx</code>, the result
          <emphasis>should</emphasis> be a valid, useable Word document with the new text in it. It's currently incomplete (it doesn't do tables for
        instance). Use at your own risk.</para>

    </sect1>

  </chapter>

  <!-- ================================================================== -->

  <chapter xml:id="chapter-xproc-3-libraries" xreflabel="XProc 3.0 Support">
    <title>XProc 3.0 Support</title>

    <para>The {$component-name} component contains the following XProc 3.0 pipelines:</para>

    <xdoc:transform href="$xdoc/code-docgen-dir.xpl" dir="../../../xtpxlib-xoffice/xpl3/" filter="\.xpl$" header-level="1" filecomponents="2" sublevels="true"
      id-suffix="xpl3-" depth="1"/>

  </chapter>
  
  <!-- ================================================================== -->
  
  <chapter xml:id="chapter-xproc-1-libraries" xreflabel="XProc 1.0 Support">
    <title>XProc 1.0 Support</title>
    
    <para>The {$component-name} component contains the following XProc 1.0 library modules:</para>
    <para><emphasis role="bold">WARNING</emphasis>: XProc&#160;1.0 support is considered deprecated and will be removed in the near future!</para>
    
    <xdoc:transform href="$xdoc/code-docgen-dir.xpl" dir="../../../xtpxlib-common/xplmod/" filter="\.mod\.xpl$" header-level="1" filecomponents="3" sublevels="true"/>
    
  </chapter>

  <!-- ================================================================== -->

  <chapter xml:id="chapter-xml-schemas" xreflabel="XML Schemas">
    <title>XML Schemas</title>

    <para>The {$component-name} component contains the following XML Schemas:</para>

    <xdoc:transform href="$xdoc/code-docgen-dir.xpl" dir="../../../xtpxlib-xoffice/xsd/" filter="\.xsd$" header-level="1" filecomponents="2" sublevels="true"/>

  </chapter>

  <!-- ================================================================== -->

  <chapter xml:id="chapter-xslt-modules" xreflabel="XSLT Modules">
    <title>XSLT Modules</title>

    <para>The {$component-name} component contains the following XSLT modules.</para>

    <xdoc:transform href="$xdoc/code-docgen-dir.xpl" dir="../../../xtpxlib-xoffice/xslmod/" filter="\.mod\.xsl$" header-level="1" filecomponents="2"
      sublevels="true"/>

  </chapter>

</book>
